import 'dart:convert';

import 'package:http/http.dart' as http;

import '../config.dart';
import '../models/student.dart';
import '../models/attendance.dart';

class ApiService {
  ApiService._();
  static final http.Client _client = http.Client();

  static Uri _studentsUri([String pathSuffix = '']) =>
      Uri.parse('${AppConfig.baseUrl}${AppConfig.studentsPath}$pathSuffix');

  static Uri _attendanceUri([String pathSuffix = '']) =>
      Uri.parse('${AppConfig.baseUrl}${AppConfig.attendancePath}$pathSuffix');

  // STUDENTS
  static Future<List<Student>> fetchStudents() async {
    final res = await _client.get(_studentsUri());
    if (res.statusCode >= 200 && res.statusCode < 300) {
      final body = jsonDecode(res.body);
      if (body is List) {
        return body.map((e) => Student.fromJson(e as Map<String, dynamic>)).toList();
      }
    }
    return <Student>[];
  }

  static Future<Student?> addStudent(Student student) async {
    final res = await _client.post(
      _studentsUri(),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode(student.toJson()),
    );
    if (res.statusCode >= 200 && res.statusCode < 300) {
      // On My JSON Server, this is NOT persisted. We still parse and return.
      final body = jsonDecode(res.body);
      return Student.fromJson(body as Map<String, dynamic>);
    }
    return null;
  }

  // ATTENDANCE
  static Future<List<AttendanceRecord>> fetchAttendance() async {
    final res = await _client.get(_attendanceUri());
    if (res.statusCode >= 200 && res.statusCode < 300) {
      final body = jsonDecode(res.body);
      if (body is List) {
        return body
            .map((e) => AttendanceRecord.fromJson(e as Map<String, dynamic>))
            .toList();
      }
    }
    return <AttendanceRecord>[];
  }

  static Future<AttendanceRecord?> addAttendance(int studentId) async {
    final payload = {
      // In a real DB, the id would be generated by server. For demo, send 0.
      'id': 0,
      'studentId': studentId,
      'timestamp': DateTime.now().toIso8601String(),
    };
    final res = await _client.post(
      _attendanceUri(),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode(payload),
    );
    if (res.statusCode >= 200 && res.statusCode < 300) {
      final body = jsonDecode(res.body);
      return AttendanceRecord.fromJson(body as Map<String, dynamic>);
    }
    return null;
  }
}
